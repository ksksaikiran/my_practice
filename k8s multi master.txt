			
			
			
			
			
														MULTI MASTER CLUSTER SETUP
														
														
	Setting up loadbalancer
	At this point we will work only on the loadbalancer node. In order to setup loadbalancer, you can leverage any loadbalancer utility 
	of your choice. If you feel like using cloud based TCP loadbalancer, feel free to do so. There is no restriction regarding the tool 
	you want to use for this purpose. For our demo, we will use HAPROXY as the primary loadbalancer.

	What are we loadbalancing ?
	We have 2 master nodes. Which means the user can connect to either of the 2 api-servers. The loadbalancer will be used to 
	loadbalance between the 2 api-servers.
												
	Switch as root - 
		sudo -i
		
	Make Passwordless Authentication between all the servers.
	Change the hostsname in 
		/etc/hostname
		hostname <enter hostname>
	Enter the hosts in 
		/etc/hosts
	Edit the file /etc/ssh/sshd_config
		enable pubkeyAuthentication yes
		permitrootlogin yes
		challengeresponseAuthentication yes

	Update your repository and your system

		sudo apt-get update && sudo apt-get upgrade -y
	
	Install haproxy
	
		sudo apt-get install haproxy -y
		
	Edit haproxy configuration
	
		vi /etc/haproxy/haproxy.cfg
		
			frontend fe-apiserver
			bind 0.0.0.0:6443						(copy and paste)
			mode tcp
			option tcplog
			default_backend be-apiserver
			
			
			backend be-apiserver
			mode tcp
			option tcplog
			option tcp-check
			balance roundrobin
			default-server inter 10s downinter 5s rise 2 fall 2 slowstart 60s maxconn 250 maxqueue 256 weight 100

			server master1 10.138.0.15:6443 check
			server master2 10.138.0.16:6443 check
			
		
	Restart and Verify haproxy
		
		systemctl restart haproxy
		systemctl status haproxy
		
	Run nc command as below -

		nc -v localhost 6443
		Connection to localhost 6443 port [tcp/*] succeeded!
		
	Install kubeadm,kubelet and docker on master and worker nodes
	
		Update the repositories

		apt-get update
		
		swapoff -a 
		apt-get update && apt-get install -y apt-transport-https curl
		curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
		
		cat <<EOF >/etc/apt/sources.list.d/kubernetes.list
		deb https://apt.kubernetes.io/ kubernetes-xenial main
		EOF
		
		apt-get update
		apt-get install -y kubelet kubeadm
		apt-mark hold kubelet kubeadm 
		sudo apt-get update
		
		sudo apt-get install -y \
		apt-transport-https \
		ca-certificates \
		curl \
		gnupg-agent \
		software-properties-common
		
		curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
		sudo add-apt-repository \
		"deb [arch=amd64] https://download.docker.com/linux/ubuntu \
		$(lsb_release -cs) \
		stable"
		sudo apt-get update
		sudo apt-get install docker-ce docker-ce-cli containerd.io -y
		
		
		
	Configure kubeadm to bootstrap the cluster
		
	Log in to master1 Switch to root account - sudo -i  Execute the below command to initialize the cluster -
		
		kubeadm init --control-plane-endpoint "<hostname that have loadbalancer or virtual IP>:6443" --upload-certs --pod-network-cidr=192.168.0.0/16 
		
	Copy the token certificates  for  masters and nodes and paste on master2,3 and worker nodes respectively 
		
		kubeadm join loadbalancer:6443 --token cnslau.kd5fjt96jeuzymzb \
		--discovery-token-ca-cert-hash sha256:871ab3f050bc9790c977daee9e44cf52e15ee37ab9834567333b939458a5bfb5 \     (LIKE, THIS TOKEN IS FOR MASTER)
		--control-plane --certificate-key 824d9a0e173a810416b4bca7038fb33b616108c17abcbc5eaef8651f11e3d146
		
	This token is for worker node,
		
		kubeadm join loadbalancer:6443 --token cnslau.kd5fjt96jeuzymzb \
		--discovery-token-ca-cert-hash sha256:871ab3f050bc9790c977daee9e44cf52e15ee37ab9834567333b939458a5bfb5 
		
	Setup kubeconfig using -
		mkdir -p $HOME/.kube
		sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config (If admin.conf file is not present in that host, make an "scp master1:/etc/kubernetes/admin.conf $HOME/.kube/config ")
		sudo chown $(id -u):$(id -g) $HOME/.kube/config
		
		chown $(id -u):$(id -g) $HOME/.kube/config
		
		snap install kubectl --classic
		
		kubectl get nodes 
		
	From the loadbalancer node execute -

		kubectl apply -f https://docs.projectcalico.org/v3.8/manifests/calico.yaml
		
	You can now verify your HA cluster using -

		kubectl get nodes 
